//
// Variables
//

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with brower-based text zoom or user-set defaults.
$base-font-size: 100% !default;

// Set your base font-size in pixels so emCalc can do its magic below
$em-base: 16px !default;



//
// Functions
//

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
@function emCalc($pxWidth) {
  @return $pxWidth / $em-base * 1em;
}

// Grid Calculation for Percentages
@function gridCalc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}



//
// Media Queries
//

$small-screen: emCalc(320px) !default;
$medium-screen: emCalc(768px) !default;
$large-screen: emCalc(1020px) !default;

$screen: "only screen" !default;
$small: "only screen and (min-width:"#{$small-screen}")" !default;
$medium: "only screen and (min-width:"#{$medium-screen}")" !default;
$large: "only screen and (min-width:"#{$large-screen}")" !default;
$landscape: "only screen and (orientation: landscape)" !default;
$portrait: "only screen and (orientation: portrait)" !default;



//
// Grid Variables
//

$row-width:     emCalc(1020px) !default;
$column-gutter: emCalc(30px) !default;
$total-columns: 12 !default;
$default-float: left !default;



//
// Clearfix
//

@mixin clearfix {

	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}

}



//
// Grid Mixins
//

// For creating container, nested, and collapsed rows.
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-left: -($column-gutter/2);
    margin-right: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }

  // Clearfix for all rows
  @include clearfix();

}


// For creating columns - @include these inside a media query to control small vs. large grid layouts
@mixin grid-column($columns:false, $last-column:false, $center:false, $offset:false, $push:false, $pull:false, $collapse:false, $float:left) {

  position: relative;

  // Gutter padding whenever a column isn't set to collapse
  @if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: gridCalc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $default-opposite; }

    // if collapsed, get rid of gutter padding
    @else if $collapse { padding-left: 0; padding-right: 0; }

  }

  @if $collapse { padding-left: 0; padding-right: 0; }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: gridCalc($offset, $total-columns); }

  // Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: gridCalc($push, $total-columns); #{$default-opposite}: auto; }
  @if $pull { #{$default-opposite}: gridCalc($pull, $total-columns); #{$default-float}: auto; }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-left: auto;
    margin-right: auto;
    float: none !important;
  }

  @if $float {
    @if $float == left or true { float: $default-float; }
    @else if $float == right { float: $default-opposite; }
    @else { float: none; }
  }

}